generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  SUPPORT
  STORE_MANAGER
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime @map("expiresAt")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime? @map("verifiedAt")
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  orders        Order[]
  role          Role      @default(CUSTOMER)
  logs          Log[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  price       Float
  image       String
  seller      User     @relation(fields: [sellerId], references: [id])
  sellerId    String   @db.ObjectId
  orders      Order[]  @relation(fields: [orderIDs], references: [id])
  orderIDs    String[] @db.ObjectId

  @@map("products")
}

model Order {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  total      Float
  orderer    User      @relation(fields: [ordererId], references: [id])
  ordererId  String    @db.ObjectId
  products   Product[] @relation(fields: [productIDs], references: [id])
  productIDs String[]  @db.ObjectId

  @@map("orders")
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  action    String
  details   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  @@map("logs")
}
